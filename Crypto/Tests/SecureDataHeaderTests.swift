import CryptoKit
import XCTest
@testable import Crypto

class SecureDataHeaderTests: XCTestCase {
    
    func testInitWithElementsEncryptedByWrappedMessageKey() {
        let tag = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
        ] as Data
        let elements = [
            SecureDataHeader.Element(nonceRange: 0..<2, ciphertextRange: 2..<4, tag: tag)
        ]
        let wrappedMessageKey = [
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
            0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
            0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
            0x48, 0x49, 0x4A, 0x4B
        ] as Data
        let header = SecureDataHeader(with: elements, encryptedBy: wrappedMessageKey)
        
        XCTAssertEqual(header.elements, elements)
        XCTAssertEqual(header.wrappedMessageKey, wrappedMessageKey)
    }
    
    func testInitFromDataSuccess() throws {
        let messageCount = [
            0x01, 0x00, 0x00, 0x00
        ] as Data
        let ciphertextSizes = [
            0x02, 0x00, 0x00, 0x00
        ] as Data
        let wrappedMessageKey = [
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
            0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
            0x40, 0x41, 0x42, 0x43,
        ] as Data
        let tags =  [
            0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
            0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57
        ] as Data
        let secureData = messageCount + ciphertextSizes + wrappedMessageKey + tags
        let header = try SecureDataHeader(data: secureData)
        
        let expectedElements = [
            SecureDataHeader.Element(nonceRange: 84..<96, ciphertextRange: 96..<98, tag: tags)
        ]
        XCTAssertEqual(header.elements, expectedElements)
        XCTAssertEqual(header.wrappedMessageKey, wrappedMessageKey)
    }
    
    func testInitFromDataInvalidDataSize() {
        let secureData = Data()
        
        XCTAssertThrowsError(try SecureDataHeader(data: secureData))
    }
    
    func testInitFromDataProviderSuccess() throws {
        let messageCount = [
            0x01, 0x00, 0x00, 0x00
        ] as Data
        let ciphertextSizes = [
            0x02, 0x00, 0x00, 0x00
        ] as Data
        let wrappedMessageKey = [
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
            0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F,
            0x40, 0x41, 0x42, 0x43,
        ] as Data
        let tags = [
            0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
            0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57
        ] as Data
        let secureData = messageCount + ciphertextSizes + wrappedMessageKey + tags
        let header = try SecureDataHeader(from: dataProvider)
        
        let expectedElements = [
            SecureDataHeader.Element(nonceRange: 84..<96, ciphertextRange: 96..<98, tag: tags)
        ]
        XCTAssertEqual(header.elements, expectedElements)
        XCTAssertEqual(header.wrappedMessageKey, wrappedMessageKey)
        
        func dataProvider(range: Range<Int>) throws -> Data {
            secureData[range]
        }
    }
    
    func testInitFromDataProviderMessageCountDataNotAvailable() {
        XCTAssertThrowsError(try SecureDataHeader(from: dataProvider))
        
        func dataProvider(range: Range<Int>) throws -> Data {
            switch range {
            case 0..<4:
                throw NSError()
            default:
                XCTFail()
                return []
            }
        }
    }
    
    func testInitFromDataProviderHeaderDataNotAvailable() {
        XCTAssertThrowsError(try SecureDataHeader(from: dataProvider))
        
        func dataProvider(range: Range<Int>) throws -> Data {
            switch range {
            case 0..<4:
                return [
                    0x01, 0x00, 0x00, 0x00
                ]
            case 4..<84:
                throw NSError()
            default:
                XCTFail()
                return []
            }
        }
    }
    
    func testUnwrapMessageKeySuccess() throws {
        let elements = [SecureDataHeader.Element]()
        let wrappedMessageKey = [
            0x26, 0x6A, 0xB8, 0x82, 0x02, 0x4E, 0x4E, 0x6F,
            0x85, 0x29, 0xEF, 0x01, 0x07, 0xE1, 0x78, 0x4C,
            0xF8, 0x4B, 0x67, 0xCE, 0x86, 0x30, 0x20, 0xD4,
            0xED, 0x0A, 0x7C, 0xF0, 0x51, 0xA0, 0xAC, 0xD4,
            0xFB, 0x59, 0x43, 0xA1, 0x26, 0xE3, 0xBB, 0x47,
            0xD1, 0x75, 0x4A, 0x82, 0x46, 0xDB, 0x17, 0xC4,
            0xB3, 0x55, 0xD0, 0x56, 0x0F, 0xA1, 0x29, 0xF2,
            0xB0, 0x62, 0xBC, 0x46
        ] as Data
        let masterKey = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
        ] as MasterKey
        let expectedMessageKey = [
            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
            0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F
        ] as MessageKey
        let header = SecureDataHeader(with: elements, encryptedBy: wrappedMessageKey)
        
        let messageKey = try header.unwrapMessageKey(with: masterKey)
        
        XCTAssertEqual(messageKey, expectedMessageKey)
    }
    
    func testUnwrapMessageKeyInvalidMessageKeySize() {
        let elements = [SecureDataHeader.Element]()
        let wrappedMessageKey = [] as Data
        let header = SecureDataHeader(with: elements, encryptedBy: wrappedMessageKey)
        let masterKey = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
        ] as MasterKey
        
        XCTAssertThrowsError(try header.unwrapMessageKey(with: masterKey))
    }
    
    func testUnwrapMessageKeyInvalidMessageKey() throws {
        let elements = [SecureDataHeader.Element]()
        let wrappedMessageKey = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00
        ] as Data
        let masterKey = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
        ] as MasterKey
        let header = SecureDataHeader(with: elements, encryptedBy: wrappedMessageKey)
        
        XCTAssertThrowsError(try header.unwrapMessageKey(with: masterKey))
    }
    
    func testUnwrapMessageKeyInvalidMasterKey() throws {
        let elements = [SecureDataHeader.Element]()
        let wrappedMessageKey = [
            0x26, 0x6A, 0xB8, 0x82, 0x02, 0x4E, 0x4E, 0x6F,
            0x85, 0x29, 0xEF, 0x01, 0x07, 0xE1, 0x78, 0x4C,
            0xF8, 0x4B, 0x67, 0xCE, 0x86, 0x30, 0x20, 0xD4,
            0xED, 0x0A, 0x7C, 0xF0, 0x51, 0xA0, 0xAC, 0xD4,
            0xFB, 0x59, 0x43, 0xA1, 0x26, 0xE3, 0xBB, 0x47,
            0xD1, 0x75, 0x4A, 0x82, 0x46, 0xDB, 0x17, 0xC4,
            0xB3, 0x55, 0xD0, 0x56, 0x0F, 0xA1, 0x29, 0xF2,
            0xB0, 0x62, 0xBC, 0x46
        ] as Data
        let masterKey = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ] as MasterKey
        let header = SecureDataHeader(with: elements, encryptedBy: wrappedMessageKey)
        
        XCTAssertThrowsError(try header.unwrapMessageKey(with: masterKey))
    }
    
    func testUnwrapMessageKeyInvalidTagSegment() throws {
        let tag = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ] as Data
        let elements = [
            SecureDataHeader.Element(nonceRange: 0..<0, ciphertextRange: 0..<0, tag: tag)
        ]
        let wrappedMessageKey = [
            0x26, 0x6A, 0xB8, 0x82, 0x02, 0x4E, 0x4E, 0x6F,
            0x85, 0x29, 0xEF, 0x01, 0x07, 0xE1, 0x78, 0x4C,
            0xF8, 0x4B, 0x67, 0xCE, 0x86, 0x30, 0x20, 0xD4,
            0xED, 0x0A, 0x7C, 0xF0, 0x51, 0xA0, 0xAC, 0xD4,
            0xFB, 0x59, 0x43, 0xA1, 0x26, 0xE3, 0xBB, 0x47,
            0xD1, 0x75, 0x4A, 0x82, 0x46, 0xDB, 0x17, 0xC4,
            0xB3, 0x55, 0xD0, 0x56, 0x0F, 0xA1, 0x29, 0xF2,
            0xB0, 0x62, 0xBC, 0x46
        ] as Data
        let masterKey = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
        ] as MasterKey
        let header = SecureDataHeader(with: elements, encryptedBy: wrappedMessageKey)
        
        XCTAssertThrowsError(try header.unwrapMessageKey(with: masterKey))
    }
    
}
