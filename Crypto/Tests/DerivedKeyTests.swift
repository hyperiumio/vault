import CommonCrypto
import CryptoKit
import XCTest
@testable import Crypto

class DerivedKeyTests: XCTestCase {
    
    func testInitFromData() {
        let keyData = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
        ] as Data
        let derivedKey = DerivedKey(with: keyData)
        let expectedKey = SymmetricKey(data: keyData)
        
        XCTAssertEqual(derivedKey.value, expectedKey)
    }
    
    func testInitFromPasswordWithPublicArguments() async throws {
        let salt = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
        ] as Data
        let rounds = [
            0x08, 0x04, 0x02, 0x01
        ] as Data
        let container = salt + rounds
        let arguments = try DerivedKey.PublicArguments(from: container)
        let derivedKey = try await DerivedKey(from: "foo", with: arguments)
        let expectedKey = [
            0x40, 0xD5, 0x28, 0x8C, 0x64, 0x47, 0xD4, 0x1F,
            0xB0, 0xB3, 0x52, 0x1D, 0xC2, 0xF1, 0x0E, 0x23,
            0x90, 0x76, 0x9A, 0x32, 0x27, 0x3A, 0xB1, 0x68,
            0x29, 0xC0, 0xFA, 0xCC, 0x13, 0xBA, 0xED, 0xF3
        ] as SymmetricKey
        
        XCTAssertEqual(derivedKey.value, expectedKey)
    }
    
    func testInitFromPasswordWithPublicArgumentsInvalidRounds() throws {
        let salt = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
        ] as Data
        let rounds = [
            0x00, 0x00, 0x00, 0x00
        ] as Data
        let container = salt + rounds
        let arguments = try DerivedKey.PublicArguments(from: container)
        
        XCTAssertThrowsError(try DerivedKey(from: "foo", with: arguments))
    }
    
    func testWithUnsafeBytes() {
        let keyData = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
        ] as Data
        let derivedKeyData = DerivedKey(with: keyData).withUnsafeBytes { keyData in
            Data(keyData)
        }
            
        XCTAssertEqual(derivedKeyData, keyData)
    }
    
}

class DerivedKeyPublicArgumentsTests: XCTestCase {
    
    func testInit() throws {
        let salt = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
        ] as Data
        let config = DerivedKey.Configuration(rng: rng)
        let arguments = try DerivedKey.PublicArguments(configuration: config)
        
        XCTAssertEqual(arguments.salt, salt)
        XCTAssertEqual(arguments.rounds, 524288)
        
        func rng(bytes: UnsafeMutableRawPointer?, count: Int) -> CCRNGStatus {
            let buffer = UnsafeMutableRawBufferPointer(start: bytes, count: count)
            salt.copyBytes(to: buffer)
            return CCRNGStatus(kCCSuccess)
        }
    }
    
    func testInitRNGFailure() {
        let config = DerivedKey.Configuration(rng: rng)
        
        XCTAssertThrowsError(try DerivedKey.PublicArguments(configuration: config))
        
        func rng(bytes: UnsafeMutableRawPointer?, count: Int) -> CCRNGStatus {
            CCRNGStatus(kCCRNGFailure)
        }
    }
    
    func testInitFromContainer() throws {
        let salt = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
        ] as Data
        let rounds = [
            0x08, 0x04, 0x02, 0x01
        ] as Data
        let container = salt + rounds
        let arguments = try DerivedKey.PublicArguments(from: container)
        
        XCTAssertEqual(arguments.salt, salt)
        XCTAssertEqual(arguments.rounds, 16909320)
    }
    
    func testInitFromContainerInvalidContainerSize() {
        let container = Data()
        
        XCTAssertThrowsError(try DerivedKey.PublicArguments(from: container))
    }
    
    func testContainer() throws {
        let salt = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
        ] as Data
        let rounds = [
            0x08, 0x04, 0x02, 0x01
        ] as Data
        let inputContainer = salt + rounds
        let outputContainer = try DerivedKey.PublicArguments(from: inputContainer).container()
        
        XCTAssertEqual(outputContainer, inputContainer)
    }
    
}
