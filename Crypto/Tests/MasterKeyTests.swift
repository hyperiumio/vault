import CommonCrypto
import CryptoKit
import XCTest
@testable import Crypto

class MasterKeyTests: XCTestCase {
    
    func testInitFromData() {
        let keyData = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
        ] as Data
        let masterKey = MasterKey(with: keyData)
        let expectedKey = SymmetricKey(data: keyData)
        
        XCTAssertEqual(masterKey.value, expectedKey)
    }
    
    func testInit() {
        let key = MasterKey()
        
        XCTAssertEqual(key.value.bitCount, SymmetricKeySize.bits256.bitCount)
    }
    
    func testInitFromEncryptedContainerUsingDerivedKey() throws {
        let container = [
            0xC1, 0x89, 0xE0, 0x27, 0x3C, 0x34, 0xD9, 0x2E,
            0x67, 0xCF, 0x3F, 0x8A, 0x13, 0x8E, 0x81, 0x7A,
            0xF0, 0xFF, 0xC8, 0x77, 0x79, 0x33, 0x18, 0x82,
            0xEB, 0x95, 0x93, 0xFF, 0xFB, 0x79, 0xD5, 0x39,
            0xF2, 0x2B, 0x99, 0x57, 0x4A, 0x32, 0xBC, 0x0E,
            0x30, 0x2F, 0x13, 0xBB, 0x7C, 0x2F, 0x33, 0xD8,
            0x3B, 0xE4, 0x5B, 0x16, 0x7D, 0xD4, 0x64, 0x75,
            0xE5, 0xBD, 0x2E, 0x97
        ] as Data
        let derivedKeyData = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
        ] as Data
        let derivedKey = DerivedKey(with: derivedKeyData)
        let masterKey = try MasterKey(from: container, using: derivedKey)
        let expectedKey = [
            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
            0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F
        ] as SymmetricKey
        
        XCTAssertEqual(masterKey.value, expectedKey)
    }
    
    func testInitFromEncryptedContainerUsingDerivedKeyInvalidContainer() {
        let container = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00
        ] as Data
        let derivedKeyData = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
        ] as Data
        let derivedKey = DerivedKey(with: derivedKeyData)
        
        XCTAssertThrowsError(try MasterKey(from: container, using: derivedKey))
    }
    
    func testInitFromEncryptedContainerUsingDerivedKeyInvalidDerivedKey() {
        let container = [
            0xC1, 0x89, 0xE0, 0x27, 0x3C, 0x34, 0xD9, 0x2E,
            0x67, 0xCF, 0x3F, 0x8A, 0x13, 0x8E, 0x81, 0x7A,
            0xF0, 0xFF, 0xC8, 0x77, 0x79, 0x33, 0x18, 0x82,
            0xEB, 0x95, 0x93, 0xFF, 0xFB, 0x79, 0xD5, 0x39,
            0xF2, 0x2B, 0x99, 0x57, 0x4A, 0x32, 0xBC, 0x0E,
            0x30, 0x2F, 0x13, 0xBB, 0x7C, 0x2F, 0x33, 0xD8,
            0x3B, 0xE4, 0x5B, 0x16, 0x7D, 0xD4, 0x64, 0x75,
            0xE5, 0xBD, 0x2E, 0x97
        ] as Data
        let derivedKeyData = [
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        ] as Data
        let derivedKey = DerivedKey(with: derivedKeyData)
        
        XCTAssertThrowsError(try MasterKey(from: container, using: derivedKey))
    }
    
    func testEncryptedContainer() throws {
        let derivedKeyData = [
            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
        ] as Data
        let derivedKey = DerivedKey(with: derivedKeyData)
        let masterKeyData = [
            0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27,
            0x28, 0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x3A, 0x3B, 0x3C, 0x3D, 0x3E, 0x3F
        ] as Data
        let masterKey = MasterKey(with: masterKeyData)
        let container = try masterKey.encryptedContainer(using: derivedKey)
        
        XCTAssertEqual(container.count, 60)
    }
    
    func testEncryptedContainerInvalidKey() {
        let keyData = Data()
        let derivedKey = DerivedKey(with: keyData)
        let masterKey = MasterKey()
        
        XCTAssertThrowsError(try masterKey.encryptedContainer(using: derivedKey))
    }
    
}
